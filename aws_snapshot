pipeline {
    agent any
 
    environment {
        AWS_REGION = 'eu-north-1b'  // AWS region
        DAYS_OLD = 0              // Snapshot age in days
    }
 
    stages {
        stage('List Old Snapshots') {
            steps {
                withAWS(region: AWS_REGION, credentials: 'aws-credentials') {
                    script {
                        // List old snapshots using AWS SDK for Groovy
                        def currentDate = new Date()
                        def midnightDate = currentDate.clearTime()  // Clear time portion to get midnight
                        def midnightDateString = midnightDate.format("yyyy-MM-dd'T'00:00:00'Z'") // Convert to AWS format
 
                        echo "Looking for snapshots before: $midnightDateString"
 
                        def snapshots = ec2.describeSnapshots([Filters: [
                            [Name: "start-time", Values: ["*"]]
                        ]])
 
                        snapshots.Snapshots.each { snapshot ->
                            if (snapshot.StartTime < midnightDate) {
                                echo "Snapshot ID: ${snapshot.SnapshotId} created on: ${snapshot.StartTime}"
                            }
                        }
                    }
                }
            }
        }
 
        stage('Delete Old Snapshots') {
            steps {
                withAWS(region: AWS_REGION, credentials: 'aws-credentials') {
                    script {
                        // Delete old snapshots directly with AWS SDK for Groovy
                        def currentDate = new Date()
                        def midnightDate = currentDate.clearTime()  // Get the date at midnight
                        def midnightDateString = midnightDate.format("yyyy-MM-dd'T'00:00:00'Z'")
 
                        echo "Deleting snapshots created before: $midnightDateString"
 
                        // Describe and delete snapshots that are older than the current date
                        def snapshots = ec2.describeSnapshots([Filters: [
                            [Name: "start-time", Values: ["*"]]
                        ]])
 
                        snapshots.Snapshots.each { snapshot ->
                            if (snapshot.StartTime < midnightDate) {
                                echo "Deleting snapshot ID: ${snapshot.SnapshotId}"
                                ec2.deleteSnapshot([SnapshotId: snapshot.SnapshotId])
                            }
                        }
                    }
                }
            }
        }
    }
 
    post {
        success {
            echo "Pipeline completed successfully. Old snapshots deleted."
        }
        failure {
            echo "Pipeline failed. Please check the logs."
        }
    }
}
